/*
Boost Software License 1.0 (BSL-1.0)
View Summary of Boost Software License 1.0 (BSL-1.0) on TLDRLegal Â» (Disclaimer)

Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying documentation covered by this 
license (the "Software") to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all subject to the following:

The copyright notices in the Software and this entire statement, including the above license grant, 
this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, 
and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object code
generated by a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. 
IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, 
WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
*/ 


#include <iostream>
#include <boost/array.hpp>
#include <boost/asio.hpp>
#include <string.h>
#include "udp.h"

using boost::asio::ip::udp;
boost::array<char,BUFFER_MAX_LENGTH> recv_buf;
char *buff_s;

// 
void receive(const boost::system::error_code& error, std::size_t len)
{
     std::string str; 

    if (!error || error == boost::asio::error::message_size)
    {
		str =  recv_buf.data();
	    std::strncpy(buff_s, str.c_str(), BUFFER_MAX_LENGTH);
    }
}

extern "C" int receive_udp(char *buff_r)
{

    buff_s = buff_r;

	try {
		boost::asio::io_service io_service;

		//
		// Initialise a socket to listen on UDP port UDP_PORT.
		//
		udp::socket socket(io_service, udp::endpoint(udp::v4(), atoi(UDP_PORT)));

		udp::endpoint remote_endpoint;
		boost::system::error_code error;

		// This function will cause the application to listen in the background for a new request. 
		// When such a request is received, receive() function with two arguments: 
		// fisrt : a value whether the operation succeeded or failed, 
		// second: a size_t value bytes_transferred specifying the number of bytes received.
		socket.async_receive_from(boost::asio::buffer(recv_buf), remote_endpoint, &receive);
		io_service.run();

	} catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
		return 1;
	}
	return 0; 
}
