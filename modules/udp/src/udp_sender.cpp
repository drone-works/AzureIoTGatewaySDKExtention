/*
Boost Software License 1.0 (BSL-1.0)
View Summary of Boost Software License 1.0 (BSL-1.0) on TLDRLegal Â» (Disclaimer)

Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying documentation covered by this 
license (the "Software") to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative works of the Software, 
and to permit third-parties to whom the Software is furnished to do so, all subject to the following:

The copyright notices in the Software and this entire statement, including the above license grant, 
this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, 
and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object code
generated by a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. 
IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, 
WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
*/ 

#include <stdio.h>
#include <iostream>
#include <boost/array.hpp>
#include <boost/asio.hpp>
#include "udp.h"

using boost::asio::ip::udp;
extern "C" int send_udp(char *sd)
{
 
	try {
		boost::asio::io_service io_service;
		udp::resolver resolver(io_service);

        // We use an boost::asio::ip::udp::resolver object to find the correct remote endpoint to use based on the host and service names. 
        // The query is restricted to return only IPv4 endpoints by the boost::asio::ip::udp::v4() argument.
		udp::resolver::query query(udp::v4(), DST_IP, UDP_PORT);
		udp::endpoint receiver_endpoint = *resolver.resolve(query);

		//
	    // socket and initiate contact with the endpoint.
	    //
		udp::socket socket(io_service);
		socket.open(udp::v4());
		std::string str = sd;
		socket.send_to(boost::asio::buffer(str), receiver_endpoint);
	} catch (std::exception& e) {
		std::cerr << e.what() << std::endl;
	}
}

